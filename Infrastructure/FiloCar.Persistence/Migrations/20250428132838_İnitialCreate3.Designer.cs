// <auto-generated />
using System;
using FiloCar.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FiloCar.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250428132838_İnitialCreate3")]
    partial class İnitialCreate3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FiloCar.Domain.Entity.Departman", b =>
                {
                    b.Property<int>("DepartmanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmanId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmanId");

                    b.ToTable("Departmans");

                    b.HasData(
                        new
                        {
                            DepartmanId = 1111,
                            City = "Nevşehir",
                            District = "Borders",
                            Name = "Tools"
                        },
                        new
                        {
                            DepartmanId = 2222,
                            City = "Samsun",
                            District = "Buckinghamshire",
                            Name = "Industrial & Grocery"
                        },
                        new
                        {
                            DepartmanId = 3333,
                            City = "Çorum",
                            District = "Avon",
                            Name = "Games, Games & Tools"
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"));

                    b.Property<int?>("DepartmanId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DriverId");

                    b.HasIndex("DepartmanId");

                    b.ToTable("Drives");

                    b.HasData(
                        new
                        {
                            DriverId = 11,
                            DepartmanId = 1111,
                            FirstName = "Avluç",
                            FullName = "Baymünke Körmükçü",
                            IsActive = true,
                            LastName = "Akman",
                            LicenseNumber = "tsg7tuqc80",
                            PhoneNumber = "+90-923-791-21-48"
                        },
                        new
                        {
                            DriverId = 22,
                            DepartmanId = 2222,
                            FirstName = "Baybora",
                            FullName = "Gülegen Karaböcek",
                            IsActive = false,
                            LastName = "Elçiboğa",
                            LicenseNumber = "b34w21ppga",
                            PhoneNumber = "+90-271-167-84-03"
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.FuelLog", b =>
                {
                    b.Property<int>("FuelLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FuelLogId"));

                    b.Property<int>("CurrentKm")
                        .HasColumnType("int");

                    b.Property<DateTime>("FuelDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Liter")
                        .HasColumnType("float");

                    b.Property<double>("LiterCount")
                        .HasColumnType("float");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("FuelLogId");

                    b.HasIndex("StationId");

                    b.HasIndex("VehicleId");

                    b.ToTable("FuelLogs");

                    b.HasData(
                        new
                        {
                            FuelLogId = 23,
                            CurrentKm = 14959,
                            FuelDate = new DateTime(2025, 4, 20, 10, 7, 0, 20, DateTimeKind.Local).AddTicks(9667),
                            Liter = 57.879830193653021,
                            LiterCount = 34.011291054630377,
                            StationId = 1,
                            VehicleId = 1
                        },
                        new
                        {
                            FuelLogId = 24,
                            CurrentKm = 71648,
                            FuelDate = new DateTime(2025, 4, 22, 14, 47, 21, 321, DateTimeKind.Local).AddTicks(4719),
                            Liter = 38.418985906067945,
                            LiterCount = 38.308913434841585,
                            StationId = 2,
                            VehicleId = 2
                        },
                        new
                        {
                            FuelLogId = 25,
                            CurrentKm = 84497,
                            FuelDate = new DateTime(2025, 4, 23, 20, 20, 21, 801, DateTimeKind.Local).AddTicks(6175),
                            Liter = 39.266278188668196,
                            LiterCount = 30.730190321038503,
                            StationId = 3,
                            VehicleId = 3
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.MaintenanceRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KmAtMaintenance")
                        .HasColumnType("int");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceCompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("MaintenanceRecords");

                    b.HasData(
                        new
                        {
                            Id = 41,
                            Cost = 305.38999999999999,
                            Description = "Quia molestiae ut quia.",
                            KmAtMaintenance = 174055,
                            MaintenanceDate = new DateTime(2016, 2, 27, 6, 28, 27, 371, DateTimeKind.Local).AddTicks(1041),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 42,
                            Cost = 501.47000000000003,
                            Description = "Ad orta kulu olduğu.",
                            KmAtMaintenance = 176032,
                            MaintenanceDate = new DateTime(2022, 8, 28, 11, 5, 8, 796, DateTimeKind.Local).AddTicks(1151),
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 43,
                            Cost = 712.54999999999995,
                            Description = "Salladı hesap et et voluptatem blanditiis nihil qui ratione ki.",
                            KmAtMaintenance = 253293,
                            MaintenanceDate = new DateTime(2021, 5, 23, 4, 58, 12, 478, DateTimeKind.Local).AddTicks(1280),
                            VehicleId = 3
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Station", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StationId"));

                    b.Property<int>("FuelLogId")
                        .HasColumnType("int");

                    b.Property<string>("StationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StationPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StationId");

                    b.ToTable("Stations");

                    b.HasData(
                        new
                        {
                            StationId = 1,
                            FuelLogId = 0,
                            StationAddress = "Sevgi Sokak 48b, Mardin, Hırvatistan",
                            StationName = "Süleymanoğlu, Avan and Koçoğlu",
                            StationPhone = "+90-189-852-43-54"
                        },
                        new
                        {
                            StationId = 2,
                            FuelLogId = 0,
                            StationAddress = "Mevlana Sokak 535, Karaman, Yeni Kaledonya, Fransa",
                            StationName = "Bademci Inc",
                            StationPhone = "+90-970-479-6-482"
                        },
                        new
                        {
                            StationId = 3,
                            FuelLogId = 0,
                            StationAddress = "Lütfi Karadirek Caddesi 5, Ankara, Küba",
                            StationName = "Akal Inc",
                            StationPhone = "+90-934-261-46-84"
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<DateTime>("AddTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmanId")
                        .HasColumnType("int");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Km")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("DepartmanId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            AddTime = new DateTime(2015, 10, 1, 11, 40, 39, 46, DateTimeKind.Local).AddTicks(5223),
                            Brand = "BMW",
                            DepartmanId = 2222,
                            FuelType = "Dizel",
                            IsActive = true,
                            Km = 68531,
                            Model = "Focus",
                            PlateNumber = "46ABO463",
                            Year = 2023
                        },
                        new
                        {
                            VehicleId = 2,
                            AddTime = new DateTime(2019, 12, 27, 1, 24, 24, 442, DateTimeKind.Local).AddTicks(9554),
                            Brand = "BMW",
                            FuelType = "LPG",
                            IsActive = false,
                            Km = 72813,
                            Model = "Malibu",
                            PlateNumber = "46ABC463",
                            Year = 2016
                        },
                        new
                        {
                            VehicleId = 3,
                            AddTime = new DateTime(2018, 12, 24, 16, 14, 14, 298, DateTimeKind.Local).AddTicks(773),
                            Brand = "Bentley",
                            FuelType = "LPG",
                            IsActive = true,
                            Km = 80069,
                            Model = "Fortwo",
                            PlateNumber = "46ABD463",
                            Year = 2016
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.VehicleAssigment", b =>
                {
                    b.Property<int>("VehicleAssigmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleAssigmentId"));

                    b.Property<DateTime?>("AssignmentEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AssignmentStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("VehicleAssigmentId");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleAssigments");

                    b.HasData(
                        new
                        {
                            VehicleAssigmentId = 50,
                            AssignmentEnd = new DateTime(2025, 2, 19, 22, 25, 9, 676, DateTimeKind.Local).AddTicks(1776),
                            AssignmentStart = new DateTime(2023, 11, 15, 10, 48, 4, 859, DateTimeKind.Local).AddTicks(3014),
                            DriverId = 11,
                            Notes = "Ex sunt koşuyorlar sıfat quis.",
                            VehicleId = 1
                        },
                        new
                        {
                            VehicleAssigmentId = 51,
                            AssignmentEnd = new DateTime(2024, 3, 26, 6, 36, 23, 800, DateTimeKind.Local).AddTicks(3268),
                            AssignmentStart = new DateTime(2023, 11, 15, 10, 48, 4, 859, DateTimeKind.Local).AddTicks(3014),
                            DriverId = 22,
                            Notes = "Sarmal sinema blanditiis sit et.",
                            VehicleId = 2
                        },
                        new
                        {
                            VehicleAssigmentId = 52,
                            AssignmentEnd = new DateTime(2025, 3, 23, 17, 16, 20, 226, DateTimeKind.Local).AddTicks(8433),
                            AssignmentStart = new DateTime(2023, 11, 15, 10, 48, 4, 859, DateTimeKind.Local).AddTicks(3014),
                            DriverId = 22,
                            Notes = "Karşıdakine patlıcan dignissimos.",
                            VehicleId = 3
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Driver", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Departman", "Departman")
                        .WithMany("Drivers")
                        .HasForeignKey("DepartmanId");

                    b.Navigation("Departman");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.FuelLog", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Station", "Station")
                        .WithMany("FuelLogs")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FiloCar.Domain.Entity.Vehicle", "Vehicle")
                        .WithMany("FuelLogs")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.MaintenanceRecord", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Vehicle", "Vehicle")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Vehicle", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Departman", "Departman")
                        .WithMany("Vehicles")
                        .HasForeignKey("DepartmanId");

                    b.Navigation("Departman");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.VehicleAssigment", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Driver", "Driver")
                        .WithMany("Assignments")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FiloCar.Domain.Entity.Vehicle", "Vehicle")
                        .WithMany("Assignments")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Departman", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Driver", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Station", b =>
                {
                    b.Navigation("FuelLogs");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Vehicle", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("FuelLogs");

                    b.Navigation("MaintenanceRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
