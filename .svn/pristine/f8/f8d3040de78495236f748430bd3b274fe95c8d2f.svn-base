// <auto-generated />
using System;
using FiloCar.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FiloCar.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FiloCar.Domain.Entity.Departman", b =>
                {
                    b.Property<int>("DepartmanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmanId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmanId");

                    b.ToTable("Departmans");

                    b.HasData(
                        new
                        {
                            DepartmanId = 1111,
                            City = "İçel (Mersin)",
                            District = "Cambridgeshire",
                            Name = "Books & Computers"
                        },
                        new
                        {
                            DepartmanId = 2222,
                            City = "Antalya",
                            District = "Borders",
                            Name = "Music & Toys"
                        },
                        new
                        {
                            DepartmanId = 3333,
                            City = "Karaman",
                            District = "Cambridgeshire",
                            Name = "Kids, Automotive & Music"
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"));

                    b.Property<int>("DepartmanId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DriverId");

                    b.HasIndex("DepartmanId");

                    b.ToTable("Drives");

                    b.HasData(
                        new
                        {
                            DriverId = 11,
                            DepartmanId = 1111,
                            FirstName = "Gökçegöl",
                            LastName = "Dizdar ",
                            LicenseNumber = "8at9i1rovf",
                            PhoneNumber = "+90-956-296-58-12"
                        },
                        new
                        {
                            DriverId = 22,
                            DepartmanId = 2222,
                            FirstName = "Arslantegin",
                            LastName = "Erbulak",
                            LicenseNumber = "u06f87h1k7",
                            PhoneNumber = "+90-601-444-51-12"
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.FuelLog", b =>
                {
                    b.Property<int>("FuelLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FuelLogId"));

                    b.Property<int>("CurrentKm")
                        .HasColumnType("int");

                    b.Property<DateTime>("FuelDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Liter")
                        .HasColumnType("float");

                    b.Property<double>("LiterCount")
                        .HasColumnType("float");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("FuelLogId");

                    b.HasIndex("VehicleId");

                    b.ToTable("FuelLogs");

                    b.HasData(
                        new
                        {
                            FuelLogId = 23,
                            CurrentKm = 10862,
                            FuelDate = new DateTime(2025, 4, 21, 14, 16, 28, 803, DateTimeKind.Local).AddTicks(3419),
                            Liter = 35.823450732654166,
                            LiterCount = 31.664375372708072,
                            StationName = "Çatalbaş, Tekand and Topçuoğlu",
                            VehicleId = 1
                        },
                        new
                        {
                            FuelLogId = 24,
                            CurrentKm = 22665,
                            FuelDate = new DateTime(2025, 4, 13, 1, 19, 19, 435, DateTimeKind.Local).AddTicks(1202),
                            Liter = 65.889428627563035,
                            LiterCount = 30.454545419285076,
                            StationName = "Elçiboğa, Erginsoy and Kıraç ",
                            VehicleId = 2
                        },
                        new
                        {
                            FuelLogId = 25,
                            CurrentKm = 22591,
                            FuelDate = new DateTime(2025, 4, 21, 23, 12, 3, 250, DateTimeKind.Local).AddTicks(8267),
                            Liter = 59.233763568111812,
                            LiterCount = 32.209119624749228,
                            StationName = "Bakırcıoğlu - Tekelioğlu",
                            VehicleId = 3
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.MaintenanceRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KmAtMaintenance")
                        .HasColumnType("int");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("MaintenanceRecords");

                    b.HasData(
                        new
                        {
                            Id = 41,
                            Cost = 116.8,
                            Description = "Telefonu veniam filmini ducimus umut totam koyun aut ratione inventore.",
                            KmAtMaintenance = 50320,
                            MaintenanceDate = new DateTime(2016, 8, 13, 15, 19, 48, 670, DateTimeKind.Local).AddTicks(2861),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 42,
                            Cost = 581.0,
                            Description = "Otobüs iure velit.",
                            KmAtMaintenance = 56156,
                            MaintenanceDate = new DateTime(2024, 6, 29, 22, 36, 43, 314, DateTimeKind.Local).AddTicks(8833),
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 43,
                            Cost = 415.85000000000002,
                            Description = "Commodi sayfası sıla.",
                            KmAtMaintenance = 289552,
                            MaintenanceDate = new DateTime(2017, 4, 28, 5, 15, 57, 540, DateTimeKind.Local).AddTicks(4941),
                            VehicleId = 3
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<DateTime>("AddTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmanId")
                        .HasColumnType("int");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Km")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("DepartmanId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            AddTime = new DateTime(2018, 5, 26, 17, 55, 0, 1, DateTimeKind.Local).AddTicks(2854),
                            Brand = "Nissan",
                            DepartmanId = 2222,
                            FuelType = "Benzin",
                            IsActive = false,
                            Km = 60372,
                            Model = "Grand Caravan",
                            PlateNumber = "46ABO463",
                            Year = 2019
                        },
                        new
                        {
                            VehicleId = 2,
                            AddTime = new DateTime(2019, 4, 2, 13, 29, 9, 433, DateTimeKind.Local).AddTicks(1910),
                            Brand = "Tesla",
                            FuelType = "Dizel",
                            IsActive = true,
                            Km = 87630,
                            Model = "ATS",
                            PlateNumber = "46ABC463",
                            Year = 2024
                        },
                        new
                        {
                            VehicleId = 3,
                            AddTime = new DateTime(2022, 8, 10, 18, 26, 0, 618, DateTimeKind.Local).AddTicks(7707),
                            Brand = "Bentley",
                            FuelType = "Benzin",
                            IsActive = true,
                            Km = 119356,
                            Model = "A4",
                            PlateNumber = "46ABD463",
                            Year = 2020
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.VehicleAssigment", b =>
                {
                    b.Property<int>("VehicleAssigmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleAssigmentId"));

                    b.Property<DateTime?>("AssignmentEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AssignmentStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("VehicleAssigmentId");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleAssigments");

                    b.HasData(
                        new
                        {
                            VehicleAssigmentId = 50,
                            AssignmentStart = new DateTime(2025, 3, 28, 7, 58, 38, 975, DateTimeKind.Local).AddTicks(1649),
                            DriverId = 11,
                            Notes = "Dicta mutlu sit.",
                            VehicleId = 1
                        },
                        new
                        {
                            VehicleAssigmentId = 51,
                            AssignmentEnd = new DateTime(2025, 4, 21, 15, 24, 32, 440, DateTimeKind.Local).AddTicks(2012),
                            AssignmentStart = new DateTime(2025, 3, 28, 7, 58, 38, 975, DateTimeKind.Local).AddTicks(1649),
                            DriverId = 22,
                            Notes = "Layıkıyla ducimus sequi voluptatum dolore quia koştum eos gitti patlıcan.",
                            VehicleId = 2
                        },
                        new
                        {
                            VehicleAssigmentId = 52,
                            AssignmentStart = new DateTime(2025, 3, 28, 7, 58, 38, 975, DateTimeKind.Local).AddTicks(1649),
                            DriverId = 22,
                            Notes = "Consectetur ea sed bilgisayarı numquam lambadaki non uzattı mi.",
                            VehicleId = 3
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Driver", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Departman", "Departman")
                        .WithMany("Drivers")
                        .HasForeignKey("DepartmanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departman");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.FuelLog", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Vehicle", "Vehicle")
                        .WithMany("FuelLogs")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.MaintenanceRecord", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Vehicle", "Vehicle")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Vehicle", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Departman", "Departman")
                        .WithMany("Vehicles")
                        .HasForeignKey("DepartmanId");

                    b.Navigation("Departman");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.VehicleAssigment", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Driver", "Driver")
                        .WithMany("Assignments")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FiloCar.Domain.Entity.Vehicle", "Vehicle")
                        .WithMany("Assignments")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Departman", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Driver", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Vehicle", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("FuelLogs");

                    b.Navigation("MaintenanceRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
