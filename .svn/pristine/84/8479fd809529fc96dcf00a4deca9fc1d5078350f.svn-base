// <auto-generated />
using System;
using FiloCar.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FiloCar.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250421083550_InitalCreate3")]
    partial class InitalCreate3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FiloCar.Domain.Entity.Departman", b =>
                {
                    b.Property<int>("DepartmanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmanId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmanId");

                    b.ToTable("Departmans");

                    b.HasData(
                        new
                        {
                            DepartmanId = 1111,
                            City = "Muş",
                            District = "Berkshire",
                            Name = "Computers"
                        },
                        new
                        {
                            DepartmanId = 2222,
                            City = "İçel (Mersin)",
                            District = "Buckinghamshire",
                            Name = "Outdoors"
                        },
                        new
                        {
                            DepartmanId = 3333,
                            City = "Karaman",
                            District = "Borders",
                            Name = "Games"
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"));

                    b.Property<int>("DepartmanId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DriverId");

                    b.HasIndex("DepartmanId");

                    b.ToTable("Drives");

                    b.HasData(
                        new
                        {
                            DriverId = 11,
                            DepartmanId = 1111,
                            FirstName = "Bünül",
                            LastName = "Özgörkey",
                            LicenseNumber = "tiot1lzodr",
                            PhoneNumber = "+90-373-773-84-57"
                        },
                        new
                        {
                            DriverId = 22,
                            DepartmanId = 2222,
                            FirstName = "Alpış",
                            LastName = "Baykam",
                            LicenseNumber = "6esdpbd8fd",
                            PhoneNumber = "+90-797-494-8-997"
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.FuelLog", b =>
                {
                    b.Property<int>("FuelLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FuelLogId"));

                    b.Property<int>("CurrentKm")
                        .HasColumnType("int");

                    b.Property<DateTime>("FuelDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Liter")
                        .HasColumnType("float");

                    b.Property<double>("LiterCount")
                        .HasColumnType("float");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("FuelLogId");

                    b.HasIndex("VehicleId");

                    b.ToTable("FuelLogs");

                    b.HasData(
                        new
                        {
                            FuelLogId = 23,
                            CurrentKm = 37835,
                            FuelDate = new DateTime(2025, 4, 13, 4, 38, 38, 325, DateTimeKind.Local).AddTicks(750),
                            Liter = 26.614941311893638,
                            LiterCount = 36.330011831297817,
                            StationName = "Akyüz, Nalbantoğlu and Akaydın",
                            VehicleId = 1
                        },
                        new
                        {
                            FuelLogId = 24,
                            CurrentKm = 28188,
                            FuelDate = new DateTime(2025, 4, 20, 12, 9, 28, 816, DateTimeKind.Local).AddTicks(7300),
                            Liter = 43.14284619112118,
                            LiterCount = 39.950644027933926,
                            StationName = "Sandalcı, Akyürek and Beşok",
                            VehicleId = 2
                        },
                        new
                        {
                            FuelLogId = 25,
                            CurrentKm = 61870,
                            FuelDate = new DateTime(2025, 4, 21, 3, 18, 24, 791, DateTimeKind.Local).AddTicks(4865),
                            Liter = 68.328905034699616,
                            LiterCount = 32.925500758809314,
                            StationName = "Orbay - Baykam",
                            VehicleId = 3
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.MaintenanceRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KmAtMaintenance")
                        .HasColumnType("int");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("MaintenanceRecords");

                    b.HasData(
                        new
                        {
                            Id = 41,
                            Cost = 909.79999999999995,
                            Description = "Eos qui consequatur.",
                            KmAtMaintenance = 180320,
                            MaintenanceDate = new DateTime(2024, 12, 29, 14, 59, 21, 194, DateTimeKind.Local).AddTicks(3439),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 42,
                            Cost = 869.96000000000004,
                            Description = "Adanaya quia quam adipisci batarya dergi vitae ad dağılımı.",
                            KmAtMaintenance = 205378,
                            MaintenanceDate = new DateTime(2017, 12, 23, 12, 0, 40, 214, DateTimeKind.Local).AddTicks(202),
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 43,
                            Cost = 367.13,
                            Description = "Autem kutusu accusantium ve esse bilgisayarı modi odit aut quia.",
                            KmAtMaintenance = 90667,
                            MaintenanceDate = new DateTime(2018, 6, 23, 4, 44, 39, 966, DateTimeKind.Local).AddTicks(7541),
                            VehicleId = 3
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<DateTime>("AddTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmanId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Km")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("DepartmanId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            AddTime = new DateTime(2024, 7, 12, 4, 34, 53, 307, DateTimeKind.Local).AddTicks(8035),
                            Brand = "Volvo",
                            DepartmanId = 2222,
                            IsActive = true,
                            Km = 3454,
                            Model = "1",
                            PlateNumber = "46ABO463",
                            Year = 2016
                        },
                        new
                        {
                            VehicleId = 2,
                            AddTime = new DateTime(2017, 10, 30, 11, 15, 18, 970, DateTimeKind.Local).AddTicks(2990),
                            Brand = "Bugatti",
                            IsActive = false,
                            Km = 191857,
                            Model = "Prius",
                            PlateNumber = "46ABC463",
                            Year = 2020
                        },
                        new
                        {
                            VehicleId = 3,
                            AddTime = new DateTime(2019, 4, 14, 14, 27, 51, 315, DateTimeKind.Local).AddTicks(3624),
                            Brand = "BMW",
                            IsActive = false,
                            Km = 39255,
                            Model = "Grand Caravan",
                            PlateNumber = "46ABD463",
                            Year = 2019
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.VehicleAssigment", b =>
                {
                    b.Property<int>("VehicleAssigmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleAssigmentId"));

                    b.Property<DateTime?>("AssignmentEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AssignmentStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("VehicleAssigmentId");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleAssigments");

                    b.HasData(
                        new
                        {
                            VehicleAssigmentId = 50,
                            AssignmentEnd = new DateTime(2025, 3, 14, 9, 41, 57, 830, DateTimeKind.Local).AddTicks(4029),
                            AssignmentStart = new DateTime(2025, 3, 4, 19, 12, 31, 680, DateTimeKind.Local).AddTicks(3572),
                            DriverId = 11,
                            Notes = "Laudantium gül ipsam sit.",
                            VehicleId = 1
                        },
                        new
                        {
                            VehicleAssigmentId = 51,
                            AssignmentEnd = new DateTime(2025, 4, 6, 0, 57, 36, 728, DateTimeKind.Local).AddTicks(6474),
                            AssignmentStart = new DateTime(2025, 3, 4, 19, 12, 31, 680, DateTimeKind.Local).AddTicks(3572),
                            DriverId = 22,
                            Notes = "Velit mıknatıslı ut ipsum.",
                            VehicleId = 2
                        },
                        new
                        {
                            VehicleAssigmentId = 52,
                            AssignmentEnd = new DateTime(2025, 4, 1, 13, 28, 28, 685, DateTimeKind.Local).AddTicks(6450),
                            AssignmentStart = new DateTime(2025, 3, 4, 19, 12, 31, 680, DateTimeKind.Local).AddTicks(3572),
                            DriverId = 22,
                            Notes = "Patlıcan telefonu veritatis kulu quia bilgisayarı ratione ullam anlamsız.",
                            VehicleId = 3
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Driver", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Departman", "Departman")
                        .WithMany("Drivers")
                        .HasForeignKey("DepartmanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departman");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.FuelLog", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Vehicle", "Vehicle")
                        .WithMany("FuelLogs")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.MaintenanceRecord", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Vehicle", "Vehicle")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Vehicle", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Departman", "Departman")
                        .WithMany("Vehicles")
                        .HasForeignKey("DepartmanId");

                    b.Navigation("Departman");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.VehicleAssigment", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Driver", "Driver")
                        .WithMany("Assignments")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FiloCar.Domain.Entity.Vehicle", "Vehicle")
                        .WithMany("Assignments")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Departman", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Driver", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Vehicle", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("FuelLogs");

                    b.Navigation("MaintenanceRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
