// <auto-generated />
using System;
using FiloCar.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FiloCar.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250421083258_İntialCreate2")]
    partial class İntialCreate2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FiloCar.Domain.Entity.Departman", b =>
                {
                    b.Property<int>("DepartmanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmanId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmanId");

                    b.ToTable("Departmans");

                    b.HasData(
                        new
                        {
                            DepartmanId = 1111,
                            City = "Niğde",
                            District = "Cambridgeshire",
                            Name = "Tools, Movies & Electronics"
                        },
                        new
                        {
                            DepartmanId = 2222,
                            City = "Ağrı",
                            District = "Bedfordshire",
                            Name = "Music"
                        },
                        new
                        {
                            DepartmanId = 3333,
                            City = "Eskişehir",
                            District = "Cambridgeshire",
                            Name = "Automotive & Jewelery"
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"));

                    b.Property<int>("DepartmanId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DriverId");

                    b.HasIndex("DepartmanId");

                    b.ToTable("Drives");

                    b.HasData(
                        new
                        {
                            DriverId = 11,
                            DepartmanId = 1111,
                            FirstName = "Burunduk",
                            LastName = "Dalkıran",
                            LicenseNumber = "v88whdzvxh",
                            PhoneNumber = "+90-235-386-1-514"
                        },
                        new
                        {
                            DriverId = 22,
                            DepartmanId = 2222,
                            FirstName = "Çemen",
                            LastName = "Sözeri",
                            LicenseNumber = "f2uyibxko1",
                            PhoneNumber = "+90-177-874-33-32"
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.FuelLog", b =>
                {
                    b.Property<int>("FuelLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FuelLogId"));

                    b.Property<int>("CurrentKm")
                        .HasColumnType("int");

                    b.Property<DateTime>("FuelDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Liter")
                        .HasColumnType("float");

                    b.Property<double>("LiterCount")
                        .HasColumnType("float");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("FuelLogId");

                    b.HasIndex("VehicleId");

                    b.ToTable("FuelLogs");

                    b.HasData(
                        new
                        {
                            FuelLogId = 23,
                            CurrentKm = 67556,
                            FuelDate = new DateTime(2025, 4, 19, 2, 56, 38, 822, DateTimeKind.Local).AddTicks(5548),
                            Liter = 36.478213512902997,
                            LiterCount = 38.201321414182551,
                            StationName = "Tekelioğlu - Alyanak",
                            VehicleId = 1
                        },
                        new
                        {
                            FuelLogId = 24,
                            CurrentKm = 35871,
                            FuelDate = new DateTime(2025, 4, 17, 3, 18, 7, 231, DateTimeKind.Local).AddTicks(4652),
                            Liter = 76.352562655776438,
                            LiterCount = 38.918312859770509,
                            StationName = "Özbir - Kaplangı",
                            VehicleId = 2
                        },
                        new
                        {
                            FuelLogId = 25,
                            CurrentKm = 70059,
                            FuelDate = new DateTime(2025, 4, 14, 19, 19, 24, 953, DateTimeKind.Local).AddTicks(7513),
                            Liter = 38.190026950008978,
                            LiterCount = 33.731873109847029,
                            StationName = "Beşerler - Aybar",
                            VehicleId = 3
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.MaintenanceRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KmAtMaintenance")
                        .HasColumnType("int");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("MaintenanceRecords");

                    b.HasData(
                        new
                        {
                            Id = 41,
                            Cost = 444.25999999999999,
                            Description = "Iusto voluptatem okuma salladı camisi camisi koşuyorlar autem kapının.",
                            KmAtMaintenance = 28083,
                            MaintenanceDate = new DateTime(2018, 1, 6, 11, 56, 44, 217, DateTimeKind.Local).AddTicks(1271),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 42,
                            Cost = 954.51999999999998,
                            Description = "Enim qui et quaerat.",
                            KmAtMaintenance = 163307,
                            MaintenanceDate = new DateTime(2018, 8, 6, 3, 47, 52, 934, DateTimeKind.Local).AddTicks(827),
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 43,
                            Cost = 324.60000000000002,
                            Description = "Gülüyorum bundan eum orta quaerat camisi accusantium magnam.",
                            KmAtMaintenance = 284542,
                            MaintenanceDate = new DateTime(2021, 2, 11, 10, 53, 3, 451, DateTimeKind.Local).AddTicks(9257),
                            VehicleId = 3
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<DateTime>("AddTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmanId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Km")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("DepartmanId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            AddTime = new DateTime(2017, 2, 20, 11, 21, 51, 117, DateTimeKind.Local).AddTicks(4840),
                            Brand = "Jeep",
                            DepartmanId = 2222,
                            IsActive = false,
                            Km = 16777,
                            Model = "Taurus",
                            PlateNumber = "46ABO463",
                            Year = 2021
                        },
                        new
                        {
                            VehicleId = 2,
                            AddTime = new DateTime(2017, 5, 27, 16, 25, 49, 436, DateTimeKind.Local).AddTicks(4534),
                            Brand = "Mini",
                            IsActive = true,
                            Km = 129747,
                            Model = "Model 3",
                            PlateNumber = "46ABC463",
                            Year = 2017
                        },
                        new
                        {
                            VehicleId = 3,
                            AddTime = new DateTime(2019, 11, 19, 7, 38, 35, 648, DateTimeKind.Local).AddTicks(2775),
                            Brand = "Honda",
                            IsActive = true,
                            Km = 110251,
                            Model = "Corvette",
                            PlateNumber = "46ABD463",
                            Year = 2024
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.VehicleAssigment", b =>
                {
                    b.Property<int>("VehicleAssigmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleAssigmentId"));

                    b.Property<DateTime?>("AssignmentEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AssignmentStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("VehicleAssigmentId");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleAssigments");

                    b.HasData(
                        new
                        {
                            VehicleAssigmentId = 50,
                            AssignmentStart = new DateTime(2024, 5, 21, 6, 39, 2, 474, DateTimeKind.Local).AddTicks(526),
                            DriverId = 11,
                            Notes = "Biber commodi değerli ışık.",
                            VehicleId = 1
                        },
                        new
                        {
                            VehicleAssigmentId = 51,
                            AssignmentEnd = new DateTime(2025, 3, 21, 4, 35, 4, 830, DateTimeKind.Local).AddTicks(2554),
                            AssignmentStart = new DateTime(2024, 5, 21, 6, 39, 2, 474, DateTimeKind.Local).AddTicks(526),
                            DriverId = 22,
                            Notes = "Masanın ki ratione sıradanlıktan layıkıyla dolore lakin sokaklarda ducimus.",
                            VehicleId = 2
                        },
                        new
                        {
                            VehicleAssigmentId = 52,
                            AssignmentEnd = new DateTime(2024, 11, 12, 3, 8, 33, 253, DateTimeKind.Local).AddTicks(1182),
                            AssignmentStart = new DateTime(2024, 5, 21, 6, 39, 2, 474, DateTimeKind.Local).AddTicks(526),
                            DriverId = 22,
                            Notes = "Aliquid yaptı sokaklarda dolor odio.",
                            VehicleId = 3
                        });
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Driver", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Departman", "Departman")
                        .WithMany("Drivers")
                        .HasForeignKey("DepartmanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departman");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.FuelLog", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Vehicle", "Vehicle")
                        .WithMany("FuelLogs")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.MaintenanceRecord", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Vehicle", "Vehicle")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Vehicle", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Departman", "Departman")
                        .WithMany("Vehicles")
                        .HasForeignKey("DepartmanId");

                    b.Navigation("Departman");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.VehicleAssigment", b =>
                {
                    b.HasOne("FiloCar.Domain.Entity.Driver", "Driver")
                        .WithMany("Assignments")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FiloCar.Domain.Entity.Vehicle", "Vehicle")
                        .WithMany("Assignments")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Departman", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Driver", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("FiloCar.Domain.Entity.Vehicle", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("FuelLogs");

                    b.Navigation("MaintenanceRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
